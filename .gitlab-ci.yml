image: aauevt/ci-doc-base:1.0

.should_upload_artifacts:
  - if: $FORCE_RUN
    when: on_success
  - if: $CI_COMMIT_TAG
    when: on_success

variables:
  REPO_NAME: gitlab.com/evertrust/tinkey

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - test
  - build

test:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)


build:
  stage: build
  script:
    - apt-get update && apt-get install -y rpm curl git wget make sudo wixl msitools perl
    - GOOS=linux GOARCH=amd64 go build -ldflags "-extldflags '-static'" -trimpath -o $CI_PROJECT_DIR/build/tinkey-linux-amd64
    - GOOS=linux GOARCH=arm64 go build -ldflags "-extldflags '-static'" -trimpath -o $CI_PROJECT_DIR/build/tinkey-linux-arm64
    - GOOS=windows GOARCH=amd64 go build -ldflags "-extldflags '-static'" -trimpath -o $CI_PROJECT_DIR/build/tinkey.exe
    - GOOS=darwin GOARCH=arm64 go build -ldflags "-extldflags '-static'" -trimpath -o $CI_PROJECT_DIR/build/tinkey-darwin-arm64
    - GOOS=darwin GOARCH=amd64 go build -ldflags "-extldflags '-static'" -trimpath -o $CI_PROJECT_DIR/build/tinkey-darwin-amd64
  artifacts:
    paths:
      - build/
  dependencies:
    - test
